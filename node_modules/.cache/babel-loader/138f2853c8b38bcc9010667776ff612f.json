{"ast":null,"code":"import _objectSpread from\"/home/msokol/Projects/quizmaker/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/msokol/Projects/quizmaker/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from'react';import axios from'axios';import{apiHost}from'config';import Quiz from'./quiz';import GradedQuiz from'./gradedQuiz';import orderQuestions from'utils/orderQuestions';var QuizContainer=function QuizContainer(props){var quizId=props.match.params.quizId,_useState=useState(null),_useState2=_slicedToArray(_useState,2),quiz=_useState2[0],setQuiz=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),givenAnswers=_useState4[0],setGivenAnswers=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),submitted=_useState6[0],setSubmitted=_useState6[1];var fetchQuiz=function fetchQuiz(){axios.get(\"\".concat(apiHost,\"/api/quizzes/\").concat(quizId)).then(function(res){var quiz=res.data;quiz.questions=orderQuestions(quiz.questions);setQuiz(quiz);});};useEffect(fetchQuiz,[quizId]);var setAnswer=function setAnswer(answer,questionId){var answers=_objectSpread({},givenAnswers);answers[questionId]=answer;setGivenAnswers(answers);};var checkAnswers=function checkAnswers(){if(Object.keys(givenAnswers).length!==quiz.questions.length)alert(\"Please answer every question.\");else setSubmitted(true);};if(submitted)return/*#__PURE__*/_jsx(GradedQuiz,{quiz:quiz,givenAnswers:givenAnswers,retake:function retake(){return window.location.reload(false);}});if(!quiz)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});return/*#__PURE__*/_jsx(Quiz,{quiz:_objectSpread(_objectSpread({},quiz),{},{quizId:quizId}),checkAnswers:checkAnswers,setAnswer:setAnswer});};export default QuizContainer;","map":{"version":3,"sources":["/home/msokol/Projects/quizmaker/web/src/components/quiz/quizContainer.js"],"names":["React","useState","useEffect","axios","apiHost","Quiz","GradedQuiz","orderQuestions","QuizContainer","props","quizId","match","params","quiz","setQuiz","givenAnswers","setGivenAnswers","submitted","setSubmitted","fetchQuiz","get","then","res","data","questions","setAnswer","answer","questionId","answers","checkAnswers","Object","keys","length","alert","window","location","reload"],"mappings":"8VAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,QAAxB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,cAAP,KAA2B,sBAA3B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAAC,KAAK,CAAI,CAErB,GAAAC,CAAAA,MAAM,CAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,MAA5B,WAAsDT,QAAQ,CAAC,IAAD,CAA9D,wCAAqCY,IAArC,eAA2CC,OAA3C,eAFqB,eAGab,QAAQ,CAAC,EAAD,CAHrB,yCAGpBc,YAHoB,eAGNC,eAHM,8BAIOf,QAAQ,CAAC,KAAD,CAJf,yCAIpBgB,SAJoB,eAITC,YAJS,eAM3B,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACpBhB,KAAK,CAACiB,GAAN,WAAahB,OAAb,yBAAoCM,MAApC,GAA8CW,IAA9C,CAAmD,SAAAC,GAAG,CAAI,CACtD,GAAMT,CAAAA,IAAI,CAAGS,GAAG,CAACC,IAAjB,CACAV,IAAI,CAACW,SAAL,CAAiBjB,cAAc,CAACM,IAAI,CAACW,SAAN,CAA/B,CACAV,OAAO,CAACD,IAAD,CAAP,CACH,CAJD,EAKH,CAND,CAQAX,SAAS,CAACiB,SAAD,CAAY,CAACT,MAAD,CAAZ,CAAT,CAEA,GAAMe,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,MAAD,CAASC,UAAT,CAAwB,CACtC,GAAMC,CAAAA,OAAO,kBAAOb,YAAP,CAAb,CACAa,OAAO,CAACD,UAAD,CAAP,CAAsBD,MAAtB,CACAV,eAAe,CAACY,OAAD,CAAf,CACH,CAJD,CAMA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACvB,GAAGC,MAAM,CAACC,IAAP,CAAYhB,YAAZ,EAA0BiB,MAA1B,GAAqCnB,IAAI,CAACW,SAAL,CAAeQ,MAAvD,CACIC,KAAK,CAAC,+BAAD,CAAL,CADJ,IAGIf,CAAAA,YAAY,CAAC,IAAD,CAAZ,CACP,CALD,CAOA,GAAGD,SAAH,CACI,mBAAO,KAAC,UAAD,EAAY,IAAI,CAAEJ,IAAlB,CAAwB,YAAY,CAAEE,YAAtC,CAAoD,MAAM,CAAE,wBAAMmB,CAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB,CAAN,EAA5D,EAAP,CAEJ,GAAG,CAACvB,IAAJ,CACI,mBAAO,mCAAP,CAEJ,mBAAO,KAAC,IAAD,EAAM,IAAI,gCAAMA,IAAN,MAAYH,MAAM,CAANA,MAAZ,EAAV,CAA+B,YAAY,CAAEmB,YAA7C,CAA2D,SAAS,CAAEJ,SAAtE,EAAP,CACH,CApCD,CAsCA,cAAejB,CAAAA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport Quiz from './quiz';\nimport GradedQuiz from './gradedQuiz';\nimport orderQuestions from 'utils/orderQuestions';\n\nconst QuizContainer = props => {\n\n    const quizId = props.match.params.quizId, [quiz, setQuiz] = useState(null);\n    const [givenAnswers, setGivenAnswers] = useState({});\n    const [submitted, setSubmitted] = useState(false);\n\n    const fetchQuiz = () => {\n        axios.get(`${apiHost}/api/quizzes/${quizId}`).then(res => {\n            const quiz = res.data;\n            quiz.questions = orderQuestions(quiz.questions);\n            setQuiz(quiz);\n        });\n    }\n\n    useEffect(fetchQuiz, [quizId]);\n\n    const setAnswer = (answer, questionId) => {\n        const answers = {...givenAnswers};\n        answers[questionId] = answer;\n        setGivenAnswers(answers);\n    }\n\n    const checkAnswers = () => {\n        if(Object.keys(givenAnswers).length !== quiz.questions.length)\n            alert(\"Please answer every question.\");\n        else\n            setSubmitted(true);\n    }\n\n    if(submitted)\n        return <GradedQuiz quiz={quiz} givenAnswers={givenAnswers} retake={() => window.location.reload(false)  } />\n\n    if(!quiz)\n        return <div>Loading...</div>\n\n    return <Quiz quiz={{...quiz, quizId}} checkAnswers={checkAnswers} setAnswer={setAnswer}  />\n}\n \nexport default QuizContainer;"]},"metadata":{},"sourceType":"module"}