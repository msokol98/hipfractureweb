{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/msokol/Projects/quizmaker/web/src/components/quiz/quizContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport Quiz from './quiz';\nimport GradedQuiz from './gradedQuiz';\nimport orderQuestions from 'utils/orderQuestions';\n\nconst QuizContainer = props => {\n  _s();\n\n  const quizId = props.match.params.quizId,\n        [quiz, setQuiz] = useState(null);\n  const [givenAnswers, setGivenAnswers] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n\n  const fetchQuiz = () => {\n    axios.get(`${apiHost}/api/quizzes/${quizId}`).then(res => {\n      const quiz = res.data;\n      quiz.questions = orderQuestions(quiz.questions);\n      setQuiz(quiz);\n    });\n  };\n\n  useEffect(fetchQuiz, [quizId]);\n\n  const setAnswer = (answer, questionId) => {\n    const answers = { ...givenAnswers\n    };\n    answers[questionId] = answer;\n    setGivenAnswers(answers);\n  };\n\n  const checkAnswers = () => {\n    if (Object.keys(givenAnswers).length !== quiz.questions.length) alert(\"Please answer every question.\");else setSubmitted(true);\n  };\n\n  const refresh = () => {};\n\n  if (submitted) return /*#__PURE__*/_jsxDEV(GradedQuiz, {\n    quiz: quiz,\n    givenAnswers: givenAnswers,\n    retake: refresh\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 16\n  }, this);\n  if (!quiz) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 16\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Quiz, {\n    quiz: { ...quiz,\n      quizId\n    },\n    checkAnswers: checkAnswers,\n    setAnswer: setAnswer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n};\n\n_s(QuizContainer, \"9FS8dfkMyXv4RllJzukeMbzGCEQ=\");\n\n_c = QuizContainer;\nexport default QuizContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizContainer\");","map":{"version":3,"sources":["/home/msokol/Projects/quizmaker/web/src/components/quiz/quizContainer.js"],"names":["React","useState","useEffect","axios","apiHost","Quiz","GradedQuiz","orderQuestions","QuizContainer","props","quizId","match","params","quiz","setQuiz","givenAnswers","setGivenAnswers","submitted","setSubmitted","fetchQuiz","get","then","res","data","questions","setAnswer","answer","questionId","answers","checkAnswers","Object","keys","length","alert","refresh"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAAA;;AAE3B,QAAMC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,MAAlC;AAAA,QAA0C,CAACG,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,IAAD,CAApE;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMkB,SAAS,GAAG,MAAM;AACpBhB,IAAAA,KAAK,CAACiB,GAAN,CAAW,GAAEhB,OAAQ,gBAAeM,MAAO,EAA3C,EAA8CW,IAA9C,CAAmDC,GAAG,IAAI;AACtD,YAAMT,IAAI,GAAGS,GAAG,CAACC,IAAjB;AACAV,MAAAA,IAAI,CAACW,SAAL,GAAiBjB,cAAc,CAACM,IAAI,CAACW,SAAN,CAA/B;AACAV,MAAAA,OAAO,CAACD,IAAD,CAAP;AACH,KAJD;AAKH,GAND;;AAQAX,EAAAA,SAAS,CAACiB,SAAD,EAAY,CAACT,MAAD,CAAZ,CAAT;;AAEA,QAAMe,SAAS,GAAG,CAACC,MAAD,EAASC,UAAT,KAAwB;AACtC,UAAMC,OAAO,GAAG,EAAC,GAAGb;AAAJ,KAAhB;AACAa,IAAAA,OAAO,CAACD,UAAD,CAAP,GAAsBD,MAAtB;AACAV,IAAAA,eAAe,CAACY,OAAD,CAAf;AACH,GAJD;;AAMA,QAAMC,YAAY,GAAG,MAAM;AACvB,QAAGC,MAAM,CAACC,IAAP,CAAYhB,YAAZ,EAA0BiB,MAA1B,KAAqCnB,IAAI,CAACW,SAAL,CAAeQ,MAAvD,EACIC,KAAK,CAAC,+BAAD,CAAL,CADJ,KAGIf,YAAY,CAAC,IAAD,CAAZ;AACP,GALD;;AAOA,QAAMgB,OAAO,GAAG,MAAM,CAErB,CAFD;;AAIA,MAAGjB,SAAH,EACI,oBAAO,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEJ,IAAlB;AAAwB,IAAA,YAAY,EAAEE,YAAtC;AAAoD,IAAA,MAAM,EAAEmB;AAA5D;AAAA;AAAA;AAAA;AAAA,UAAP;AAEJ,MAAG,CAACrB,IAAJ,EACI,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEJ,sBAAO,QAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAC,GAAGA,IAAJ;AAAUH,MAAAA;AAAV,KAAZ;AAA+B,IAAA,YAAY,EAAEmB,YAA7C;AAA2D,IAAA,SAAS,EAAEJ;AAAtE;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAxCD;;GAAMjB,a;;KAAAA,a;AA0CN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { apiHost } from 'config';\nimport Quiz from './quiz';\nimport GradedQuiz from './gradedQuiz';\nimport orderQuestions from 'utils/orderQuestions';\n\nconst QuizContainer = props => {\n\n    const quizId = props.match.params.quizId, [quiz, setQuiz] = useState(null);\n    const [givenAnswers, setGivenAnswers] = useState({});\n    const [submitted, setSubmitted] = useState(false);\n\n    const fetchQuiz = () => {\n        axios.get(`${apiHost}/api/quizzes/${quizId}`).then(res => {\n            const quiz = res.data;\n            quiz.questions = orderQuestions(quiz.questions);\n            setQuiz(quiz);\n        });\n    }\n\n    useEffect(fetchQuiz, [quizId]);\n\n    const setAnswer = (answer, questionId) => {\n        const answers = {...givenAnswers};\n        answers[questionId] = answer;\n        setGivenAnswers(answers);\n    }\n\n    const checkAnswers = () => {\n        if(Object.keys(givenAnswers).length !== quiz.questions.length)\n            alert(\"Please answer every question.\");\n        else\n            setSubmitted(true);\n    }\n\n    const refresh = () => {\n        \n    }\n\n    if(submitted)\n        return <GradedQuiz quiz={quiz} givenAnswers={givenAnswers} retake={refresh} />\n\n    if(!quiz)\n        return <div>Loading...</div>\n\n    return <Quiz quiz={{...quiz, quizId}} checkAnswers={checkAnswers} setAnswer={setAnswer}  />\n}\n \nexport default QuizContainer;"]},"metadata":{},"sourceType":"module"}