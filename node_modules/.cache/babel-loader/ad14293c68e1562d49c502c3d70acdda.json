{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/msokol/Projects/quizmaker/web/src/components/create/quizCreationFormContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport QuizCreationForm from './quizCreationForm';\nimport postToServer from 'utils/postToServer';\nimport { webHost } from 'config';\n\nconst QuizCreationFormContainer = () => {\n  _s();\n\n  const [topic, setTopic] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [addingQuestion, setAddingQuestion] = useState(false);\n\n  const addQuestion = () => {\n    setAddingQuestion(true);\n  };\n\n  const submitQuestion = newQuestion => {\n    questions.push(newQuestion);\n    setAddingQuestion(false);\n  };\n\n  const submitQuiz = event => {\n    event.preventDefault();\n    if (!isValid()) return;\n    postToServer(\"api/quizzes\", {\n      topic,\n      questions\n    }).then(res => {\n      const quizId = res.data;\n      alert(`You and your friends can take the quiz at ${webHost}`);\n    });\n  };\n\n  const isValid = () => {\n    if (questions.length <\n    /*3*/\n    1) {\n      alert(\"Please provide at least three questions\");\n      return false;\n    }\n\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(QuizCreationForm, {\n    topic: topic,\n    setTopic: setTopic,\n    questions: questions,\n    addingQuestion: addingQuestion,\n    addQuestion: addQuestion,\n    submitQuestion: submitQuestion,\n    submitQuiz: submitQuiz\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuizCreationFormContainer, \"b4PqK7HaHfL9Xt82t9SOJ6DhAro=\");\n\n_c = QuizCreationFormContainer;\nexport default QuizCreationFormContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizCreationFormContainer\");","map":{"version":3,"sources":["/home/msokol/Projects/quizmaker/web/src/components/create/quizCreationFormContainer.js"],"names":["React","useState","QuizCreationForm","postToServer","webHost","QuizCreationFormContainer","topic","setTopic","questions","setQuestions","addingQuestion","setAddingQuestion","addQuestion","submitQuestion","newQuestion","push","submitQuiz","event","preventDefault","isValid","then","res","quizId","data","alert","length"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAASC,OAAT,QAAwB,QAAxB;;AAEA,MAAMC,yBAAyB,GAAG,MAAM;AAAA;;AAEpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,KAAD,CAApD;;AAEA,QAAMW,WAAW,GAAG,MAAM;AACtBD,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH,GAFD;;AAIA,QAAME,cAAc,GAAGC,WAAW,IAAI;AAClCN,IAAAA,SAAS,CAACO,IAAV,CAAeD,WAAf;AACAH,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,GAHD;;AAKA,QAAMK,UAAU,GAAGC,KAAK,IAAI;AACxBA,IAAAA,KAAK,CAACC,cAAN;AAEA,QAAG,CAACC,OAAO,EAAX,EACI;AAEJhB,IAAAA,YAAY,CAAC,aAAD,EAAgB;AAAEG,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAAhB,CAAZ,CAAkDY,IAAlD,CAAuDC,GAAG,IAAI;AAC1D,YAAMC,MAAM,GAAGD,GAAG,CAACE,IAAnB;AACAC,MAAAA,KAAK,CAAE,6CAA4CpB,OAAQ,EAAtD,CAAL;AACH,KAHD;AAIH,GAVD;;AAYA,QAAMe,OAAO,GAAG,MAAM;AAClB,QAAGX,SAAS,CAACiB,MAAV;AAAmB;AAAM,KAA5B,EAA+B;AAC3BD,MAAAA,KAAK,CAAC,yCAAD,CAAL;AACA,aAAO,KAAP;AACH;;AAED,WAAO,IAAP;AACH,GAPD;;AASA,sBACI,QAAC,gBAAD;AACI,IAAA,KAAK,EAAElB,KADX;AAEI,IAAA,QAAQ,EAAEC,QAFd;AAGI,IAAA,SAAS,EAAEC,SAHf;AAII,IAAA,cAAc,EAAEE,cAJpB;AAKI,IAAA,WAAW,EAAEE,WALjB;AAMI,IAAA,cAAc,EAAEC,cANpB;AAOI,IAAA,UAAU,EAAEG;AAPhB;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA/CD;;GAAMX,yB;;KAAAA,yB;AAiDN,eAAeA,yBAAf","sourcesContent":["import React, { useState } from 'react';\nimport QuizCreationForm from './quizCreationForm';\nimport postToServer from 'utils/postToServer';\nimport { webHost } from 'config';\n\nconst QuizCreationFormContainer = () => {\n    \n    const [topic, setTopic] = useState(\"\");\n    const [questions, setQuestions] = useState([]);\n    const [addingQuestion, setAddingQuestion] = useState(false);\n\n    const addQuestion = () => {\n        setAddingQuestion(true);\n    }\n\n    const submitQuestion = newQuestion => {\n        questions.push(newQuestion);\n        setAddingQuestion(false);\n    }\n\n    const submitQuiz = event => {\n        event.preventDefault();\n\n        if(!isValid())\n            return;\n\n        postToServer(\"api/quizzes\", { topic, questions }).then(res => {\n            const quizId = res.data;\n            alert(`You and your friends can take the quiz at ${webHost}`)\n        })\n    }\n\n    const isValid = () => {\n        if(questions.length < /*3*/ 1) {\n            alert(\"Please provide at least three questions\");\n            return false;\n        }\n\n        return true;\n    }\n\n    return(\n        <QuizCreationForm\n            topic={topic}\n            setTopic={setTopic}\n            questions={questions}\n            addingQuestion={addingQuestion}\n            addQuestion={addQuestion}\n            submitQuestion={submitQuestion}\n            submitQuiz={submitQuiz}\n        />\n    )\n}\n \nexport default QuizCreationFormContainer;"]},"metadata":{},"sourceType":"module"}