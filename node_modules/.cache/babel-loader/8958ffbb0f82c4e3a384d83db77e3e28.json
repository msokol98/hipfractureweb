{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/msokol/Projects/quizmaker/web/src/components/create/newQuestion.js\";\nimport React, { Component } from 'react';\nimport AnswerChoice from './answerChoice';\nimport mapIdxToLetter from 'utils/mapIdxToLetter';\nimport './styles.css';\n\nclass NewQuestion extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      prompt: \"\",\n      answerChoices: [{\n        body: \"\"\n      }, {\n        body: \"\"\n      }, {\n        body: \"\"\n      }, {\n        body: \"\"\n      }],\n      correctAnswer: null\n    };\n\n    this.removeAnswer = deletionIdx => {\n      const remainingAnswers = this.state.answerChoices.filter((_, idx) => idx !== deletionIdx);\n      if (remainingAnswers.length < 2) alert(\"There must be more than one answer choice.\");else this.setState({\n        answerChoices: remainingAnswers\n      });\n    };\n\n    this.addAnswer = () => {\n      this.setState({\n        answerChoices: [...this.state.answerChoices, {\n          body: \"\"\n        }]\n      });\n    };\n\n    this.handleChange = event => {\n      const name = event.target.name,\n            value = event.target.value;\n\n      if (name === \"prompt\") {\n        this.setState({\n          prompt: value\n        });\n      } else {\n        const {\n          answerChoices\n        } = this.state,\n              idx = name;\n        answerChoices[idx] = {\n          body: value\n        };\n        this.setState({\n          answerChoices\n        });\n      }\n    };\n\n    this.setCorrectAnswer = idx => {\n      this.setState({\n        correctAnswer: mapIdxToLetter(idx)\n      });\n    };\n\n    this.submitQuestion = () => {\n      if (!this.state.correctAnswer) {\n        alert(\"You must choose a correct answer.\");\n      } else {\n        const {\n          answerChoices\n        } = this.state;\n        const answerChoicesWithLetters = answerChoices.map((answerChoice, idx) => {\n          return { ...answerChoice,\n            letter: mapIdxToLetter(idx)\n          };\n        });\n        this.props.submitQuestion(this.state);\n      }\n    };\n  }\n\n  render() {\n    const {\n      prompt,\n      answerChoices\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-question\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Question \", this.props.number]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"has-text-grey\",\n        children: \"Click radio button to denote the correct answer...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"new-question-prompt input\",\n        type: \"text\",\n        placeholder: \"Add a question... e.g. What is the capital of Japan?\",\n        value: prompt,\n        name: \"prompt\",\n        onChange: e => this.handleChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), answerChoices.map((answerChoice, idx) => /*#__PURE__*/_jsxDEV(AnswerChoice, {\n        value: answerChoice.body,\n        idx: idx,\n        remove: this.removeAnswer,\n        onChange: this.handleChange,\n        placeholder: `Answer ${mapIdxToLetter(idx)}`,\n        correctAnswer: this.state.correctAnswer,\n        setCorrectAnswer: this.setCorrectAnswer\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }, this)), answerChoices.length < 4 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: this.addAnswer,\n        children: \"Add Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-info\",\n        onClick: this.submitQuestion,\n        children: \"Submit Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default NewQuestion;","map":{"version":3,"sources":["/home/msokol/Projects/quizmaker/web/src/components/create/newQuestion.js"],"names":["React","Component","AnswerChoice","mapIdxToLetter","NewQuestion","state","prompt","answerChoices","body","correctAnswer","removeAnswer","deletionIdx","remainingAnswers","filter","_","idx","length","alert","setState","addAnswer","handleChange","event","name","target","value","setCorrectAnswer","submitQuestion","answerChoicesWithLetters","map","answerChoice","letter","props","render","number","e"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport AnswerChoice from './answerChoice';\nimport mapIdxToLetter from 'utils/mapIdxToLetter';\nimport './styles.css';\n\nclass NewQuestion extends Component {\n\n    state = {\n        prompt: \"\",\n        answerChoices: [\n            {body: \"\"},\n            {body: \"\"},\n            {body: \"\"},\n            {body: \"\"}\n        ],\n        correctAnswer: null\n    }\n\n    removeAnswer = deletionIdx => {\n        const remainingAnswers = this.state.answerChoices.filter((_, idx) => idx !== deletionIdx);\n\n        if(remainingAnswers.length < 2)\n            alert(\"There must be more than one answer choice.\")\n        else\n            this.setState({answerChoices: remainingAnswers});\n    }\n\n    addAnswer = () => {\n        this.setState({answerChoices: [...this.state.answerChoices, {body: \"\"}]});\n    } \n\n    handleChange = event =>  {\n        const name = event.target.name, value = event.target.value;\n\n        if(name === \"prompt\") {\n            this.setState({prompt: value});\n        } else {\n            const { answerChoices } = this.state, idx = name;\n            answerChoices[idx] = {body: value};\n            this.setState({answerChoices});\n        }\n    }\n\n    setCorrectAnswer = idx => {\n        this.setState({correctAnswer: mapIdxToLetter(idx)});\n    }\n\n    submitQuestion = () => {\n        if(!this.state.correctAnswer) {\n            alert(\"You must choose a correct answer.\");\n        } else {\n            const { answerChoices } = this.state;\n            const answerChoicesWithLetters = answerChoices.map((answerChoice, idx) => {\n                return {\n                    ...answerChoice,\n                    letter: mapIdxToLetter(idx)\n                }\n            });\n            this.props.submitQuestion(this.state);\n        }\n    }\n\n    render() {\n\n        const { prompt, answerChoices } = this.state;\n\n        return(\n            <div className=\"new-question\">\n\n                <h4>Question {this.props.number}</h4>\n\n                <p className=\"has-text-grey\">Click radio button to denote the correct answer...</p>\n\n                <input \n                    className=\"new-question-prompt input\" \n                    type=\"text\" \n                    placeholder=\"Add a question... e.g. What is the capital of Japan?\"\n                    value={prompt}\n                    name=\"prompt\" \n                    onChange={e => this.handleChange(e)}\n                />\n                \n                {answerChoices.map((answerChoice, idx) => (\n\n                        <AnswerChoice \n                            key={idx}\n                            value={answerChoice.body} \n                            idx={idx} \n                            remove={this.removeAnswer}\n                            onChange={this.handleChange}\n                            placeholder={`Answer ${mapIdxToLetter(idx)}`}\n                            correctAnswer={this.state.correctAnswer}\n                            setCorrectAnswer={this.setCorrectAnswer}\n                        />\n                ))}\n\n                {answerChoices.length < 4 &&\n                    <button className=\"button\" onClick={this.addAnswer}>Add Answer</button>\n                }\n\n                <button className=\"button is-info\" onClick={this.submitQuestion}>\n                    Submit Question\n                </button>\n\n            </div>\n        )\n    }\n}\n \nexport default NewQuestion;"]},"metadata":{},"sourceType":"module"}